# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: tests

on:
  push:
    branches:
      - main
      - npe2
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
      - npe2
  workflow_dispatch:

jobs:
# the build_wheels_macos job is from scikit-image under BSD-3-Clause license:
# https://github.com/scikit-image/scikit-image/blob/main/.github/workflows/wheels_recipe.yml
  build_wheels_macos:
    name: Build python ${{ matrix.cibw_python }} ${{ matrix.cibw_arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13]
        cibw_python: ["cp39-*", "cp310-*", "cp311-*", "cp312-*"]
        # TODO: add "universal2" once a universal2 libomp is available
        cibw_arch: ["x86_64", "arm64"]
        
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: "3.12"

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      # Needed to install a specific libomp version later
      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@d2e6a045a86077fb6cad6f5adf368e9076ddaa8d # v3.1.0
        with:
          python-version: "3.12"
          channels: conda-forge
          channel-priority: true
          miniforge-variant: Miniforge3
          miniforge-version: latest

      - name: Build wheels for CPython Mac OS
        run: |
          # Make sure to use a libomp version binary compatible with the oldest
          # supported version of the macos SDK as libomp will be vendored into
          # the scikit-image wheels for macos. The list of binaries are in
          # https://packages.macports.org/libomp/.  Currently, the oldest
          # supported macos version is: High Sierra / 10.13. When upgrading
          # this, be sure to update the MACOSX_DEPLOYMENT_TARGET environment
          # variable accordingly. Note that Darwin_17 == High Sierra / 10.13.
          #
          # We need to set both MACOS_DEPLOYMENT_TARGET and MACOSX_DEPLOYMENT_TARGET
          # until there is a new release with this commit:
          # https://github.com/mesonbuild/meson-python/pull/309
          if [[ "$CIBW_ARCHS_MACOS" == arm64 ]]; then
              # SciPy requires 12.0 on arm to prevent kernel panics
              # https://github.com/scipy/scipy/issues/14688
              # so being conservative, we just do the same here
              export MACOSX_DEPLOYMENT_TARGET=12.0
              export MACOS_DEPLOYMENT_TARGET=12.0
              OPENMP_URL="https://anaconda.org/conda-forge/llvm-openmp/11.1.0/download/osx-arm64/llvm-openmp-11.1.0-hf3c4609_1.tar.bz2"
          else
              export MACOSX_DEPLOYMENT_TARGET=10.9
              export MACOS_DEPLOYMENT_TARGET=10.9
              OPENMP_URL="https://anaconda.org/conda-forge/llvm-openmp/11.1.0/download/osx-64/llvm-openmp-11.1.0-hda6cdc1_1.tar.bz2"
          fi
          echo MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}
          echo MACOS_DEPLOYMENT_TARGET=${MACOS_DEPLOYMENT_TARGET}

          # use conda to install llvm-openmp
          # Note that we do NOT activate the conda environment, we just add the
          # library install path to CFLAGS/CXXFLAGS/LDFLAGS below.
          conda create -n build $OPENMP_URL
          PREFIX="/Users/runner/miniconda3/envs/build"
          export CC=/usr/bin/clang
          export CXX=/usr/bin/clang++
          export CPPFLAGS="$CPPFLAGS -Xpreprocessor -fopenmp"
          export CFLAGS="$CFLAGS -Wno-implicit-function-declaration -I$PREFIX/include"
          export CXXFLAGS="$CXXFLAGS -I$PREFIX/include"
          export LDFLAGS="$LDFLAGS -Wl,-S -Wl,-rpath,$PREFIX/lib -L$PREFIX/lib -lomp"

          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_arch }}
          CIBW_TEST_SKIP: "*-macosx_arm64"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.cibw_arch }}-${{ strategy.job-index }}
          path: ./dist/*.whl

  build_wheels_linux:
    name: Build wheels on Linux
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_SKIP: "pp* cp310-*i686 *musllinux* *s390x* *ppc64le*"
          CIBW_CONFIG_SETTINGS: "--only-binary=scipy"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_wheels_windows:
    name: Build wheels on Windows
    runs-on: windows-2019
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_SKIP: "cp310-win32 pp*"
          CIBW_CONFIG_SETTINGS: "--only-binary=scipy"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels_macos, build_wheels_linux, build_wheels_windows, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          password: ${{ secrets.TWINE_API_KEY }}
          skip_existing: true
          # To test: repository_url: https://test.pypi.org/legacy/
